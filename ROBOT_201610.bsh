import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;
import java.io.*;
import java.net.*;
import net.miginfocom.swing.MigLayout;
import java.awt.EventQueue;

global.vport = mmc.getProperty("ArduinoValveControl", "ShowPort");
try {
	global.rport = mmc.getProperty("MicrowellPlateRobot", "ShowPort");
	robotExists = true; 
}
catch (e) {
	robotExists = false;
}

////////////////////////////
//  Functions

// Serial write
serialWrite( String portName, String command) 
{
	mmc.setSerialPortCommand(portName, command, "/r");
	mmc.sleep(SERIAL_WAIT);
}

// Move to microwell position
String moveToMicrowellPosition( String nextWell ) 
{

	serialWrite(vport, "v2off"); // Close outflow valve
	serialWrite(vport, "v3on"); // Open backflow valve
	
	String[] wellList = nextWell.split(",");
	for (int i = 0; i < wellList.length; i++) {
  		nextWell = wellList[i];
  
		// Move to new well

	print("Sending command: "+nextWell);
		mmc.setSerialPortCommand(rport, nextWell, "\r"); 
		
	print("Waiting for movement");

		if (nextWell.equals("0")) {
			mmc.sleep(10000);		
    } else {
			mmc.sleep(1500);
		}

	mmc.sleep(1500);
	print("Done waiting.");

	}

	serialWrite(vport, "v3off"); // Close backflow
   mmc.sleep(1000);
	print("move complete");

	return nextWell;
} 

// Move to multiple microwell positions
moveToPositionList( String controlString, String delaySec)
{

	String[] positionList = controlString.split(";");
	String[] delayList = delaySec.split(",");

	// Display position list
	for (int i = 0; i < positionList.length; i++) {
  		String nextString = positionList[i];
  		String nextDelay = delayList[i];
		print( "" + (i+1) + ": " + nextString + " , delay: " + nextDelay);
	}
	
	for (int i = 0; i < positionList.length; i++) {
  		String nextString = positionList[i];
  		int currentDelay = Integer.parseInt(delayList[i]);
  		moveToMicrowellPosition(nextString);

		// if need to stay in well for >45s (incubation not a wash), shut off waste to conserve volume, otherwise just wash
	   if (currentDelay >= 45) {
			mmc.sleep(120*1000);
			serialWrite(vport, "v2off");
		} else {
			serialWrite(vport, "v2on");
		}
		
		mmc.sleep(currentDelay*1000);
		serialWrite(vport, "v2off"); // Open outflow valve
		
	}
	
}

//////////////////// End functions /////////////////


	if (f3 != void) {
		f3.dispatchEvent(new WindowEvent(f3, WindowEvent.WINDOW_CLOSING));
	}
	
	f3 = new JFrame("Serial Panel");
	
	f3.setBounds(200,100,733,533);
	cp3 = f3.getContentPane(); 
	cp3.setLayout(new MigLayout("ins 20", "[para]0[][1001p,fill][601p][951p,fill]")); 
	f3.setSize(500, 500);
	f3.setLocation(800, 500);
	f3.setResizable(true);

	JButton valve1on = new JButton("Valve 1: ON");
	JButton valve1off = new JButton("Valve 1: OFF");
	JButton valve2on = new JButton("Valve 2: ON");
	JButton valve2off = new JButton ("Valve 2: OFF");
	JButton valve3on = new JButton("Valve 3: ON");
	JButton valve3off = new JButton ("Valve 3: OFF");
 	JButton sendCommandValve = new JButton ("Send (Valve)");
	
	valve1on.setPreferredSize(new Dimension(95,20));
	valve1off.setPreferredSize(new Dimension(95,20));
	valve2on.setPreferredSize(new Dimension(95,20));
	valve2off.setPreferredSize(new Dimension(95,20));
	valve3on.setPreferredSize(new Dimension(95,20));
	valve3off.setPreferredSize(new Dimension(95,20));
	sendCommandValve.setPreferredSize(new Dimension(95,20));

	serialString = new JFormattedTextField("");
	serialString.setColumns(23);

	valve1on.addActionListener(this);
	valve1off.addActionListener(this);
	valve2on.addActionListener(this);
	valve2off.addActionListener(this);
	valve3on.addActionListener(this);
	valve3off.addActionListener(this);
	sendCommandValve.addActionListener(this);
			
	cp3.add(valve1on,"cell 0 1");
	cp3.add(valve1off,"cell 1 1");
	cp3.add(valve2on,"cell 0 2");
	cp3.add(valve2off,"cell 1 2, wrap");
	cp3.add(valve3on,"cell 0 3");
	cp3.add(valve3off,"cell 1 3, wrap");

	cp3.add(serialString,"span 2, wrap");
	cp3.add(sendCommandValve);

	if (robotExists) {
		JButton sendCommandRobot = new JButton ("Send (Robot)");
		sendCommandRobot.setPreferredSize(new Dimension(95,20));
		sendCommandRobot.addActionListener(this);
		cp3.add(sendCommandRobot,"wrap 20");

		/// All this new for multiwell plate

		cp3.add(new JLabel("Multiwell Plate"));
		cp3.add(new JSeparator(),"growx, wrap");
	
		JButton home = new JButton("Home");	
		JButton start = new JButton("Start");
		home.setPreferredSize(new Dimension(95,20));
		start.setPreferredSize(new Dimension(95,20));
		home.addActionListener(this);
		start.addActionListener(this);
		cp3.add(home);
		cp3.add(start,"wrap");
		
		cp3.add(new JLabel("Well Delay (s):"), "wrap");
		delayString = new JFormattedTextField("5,10,15,45,5");
		delayString.setColumns(23);
		cp3.add(delayString, "span, wrap 20");

		cp3.add(new JLabel("Positions:"), "wrap");
		multiwellString = new JFormattedTextField("A1-;A2-;A3-;A4-;A5-;0");
		multiwellString.setColumns(23);
		cp3.add(multiwellString,"span 2, wrap 20");

		wellString = new JLabel("Current position: ");
		cp3.add(wellString, "span, wrap");
	}

	f3.pack();
	f3.show();
	
	
	void actionPerformed(ActionEvent e) { 
		if(e.getActionCommand() == "Valve 1: ON"){
			mmc.setSerialPortCommand(vport, "v1on", "/r");
		}
		if(e.getActionCommand() == "Valve 1: OFF"){
			mmc.setSerialPortCommand(vport, "v1off", "/r");
		}
		if(e.getActionCommand() == "Valve 2: ON"){
			mmc.setSerialPortCommand(vport, "v2on", "/r");
		}
		if(e.getActionCommand() == "Valve 2: OFF"){
			mmc.setSerialPortCommand(vport, "v2off", "/r");
		}	
		if(e.getActionCommand() == "Valve 3: ON"){
			mmc.setSerialPortCommand(vport, "v3on", "/r");
		}
		if(e.getActionCommand() == "Valve 3: OFF"){
			mmc.setSerialPortCommand(vport, "v3off", "/r");
		}	
		if(e.getActionCommand() == "Send (Valve)"){
			String serialtext = serialString.getText();
			mmc.setSerialPortCommand(vport, serialtext, "/r");
		}
		if(e.getActionCommand() == "Send (Robot)"){
			String serialtext = serialString.getText();
			mmc.setSerialPortCommand(rport, serialtext, "/r");
		}
		if(e.getActionCommand() == "Home"){
			mmc.setSerialPortCommand(rport, "0", "/r");
		}
		if(e.getActionCommand() == "Start"){
			String commandList = multiwellString.getText();
			String delay = delayString.getText();
			moveToPositionList(commandList,delay);
		}

	}
